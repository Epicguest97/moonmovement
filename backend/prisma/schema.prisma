generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  googleId  String?  // Add this line for Google authentication
  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  communityMemberships CommunityMember[]
  createdAt DateTime @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  subreddit String
  imageUrl  String?
  linkUrl   String?
  tags      String?   // Store tags as comma-separated string
  comments  Comment[]
  votes     Vote[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  parentId  Int?      // for nested comments
  createdAt DateTime  @default(now())
}

model Vote {
  id        Int      @id @default(autoincrement())
  type      Int      // 1 for upvote, -1 for downvote
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  summary     String
  content     String?
  source      String
  url         String
  imageUrl    String?
  category    String
  publishedAt DateTime
  createdAt   DateTime @default(now())
}

model Startup {
  id              Int      @id @default(autoincrement())
  name            String
  sector          String
  valuation       String
  valuationNumber Float
  city            String
  foundedYear     Int
  logoUrl         String?
  description     String
  isUnicorn       Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  memberCount Int      @default(1)
  onlineCount Int      @default(0)
  bannerImage String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     CommunityMember[]
}

model CommunityMember {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
  joinedAt    DateTime  @default(now())
  
  @@unique([userId, communityId])
}
